import pygame

ANCHO, ALTURA = 600, 600
FILAS, COLUMNAS = 8, 8
TAMAGNO_CUADRADO = ANCHO // COLUMNAS

# Colores
ROJO = (255, 0, 0)
NEGRO = (0, 0, 0)
BLANCO = (255, 255, 255)
GRIS = (128, 128, 128)
AZUL = (59, 131, 189)

CORONA = pygame.transform.scale(pygame.image.load("corona.png"), (45, 25))

class Piezas:
    RELLENO = 15
    BORDE = 2

    def __init__(self, color, fil, col):
        self.fil = fil
        self.col = col
        self.color = color
        self.king = False
        self.x = 0
        self.y = 0
        self.calc_pos()

    def calc_pos(self):
        self.x = TAMAGNO_CUADRADO * self.col + TAMAGNO_CUADRADO // 2
        self.y = TAMAGNO_CUADRADO * self.fil + TAMAGNO_CUADRADO // 2

    def make_king(self):
        self.king = True

    def draw(self, win):
        radio = TAMAGNO_CUADRADO // 2 - self.RELLENO
        pygame.draw.circle(win, GRIS, (self.x, self.y), radio + self.BORDE)
        pygame.draw.circle(win, self.color, (self.x, self.y), radio)
        if self.king:
            win.blit(CORONA, (self.x - CORONA.get_width() // 2, self.y - CORONA.get_height() // 2))

    def move(self, fil, col):
        self.fil = fil
        self.col = col
        self.calc_pos()

class Tablero:
    def __init__(self):
        self.tablero = []
        self.ROJO_left = self.BLANCO_left = 12
        self.ROJO_Kings = self.BLANCO_kings = 0
        self.crear_tablero()

    def draw_cuadrados(self, win):
        win.fill(NEGRO)
        for fil in range(FILAS):
            for col in range(fil % 2, COLUMNAS, 2):
                pygame.draw.rect(win, ROJO, (col * TAMAGNO_CUADRADO, fil * TAMAGNO_CUADRADO, TAMAGNO_CUADRADO, TAMAGNO_CUADRADO))

    def crear_tablero(self):
        for fil in range(FILAS):
            self.tablero.append([])
            for col in range(COLUMNAS):
                if col % 2 == ((fil + 1) % 2):
                    if fil < 3:
                        self.tablero[fil].append(Piezas(BLANCO, fil, col))
                    elif fil > 4:
                        self.tablero[fil].append(Piezas(ROJO, fil, col))
                    else:
                        self.tablero[fil].append(0)
                else:
                    self.tablero[fil].append(0)

    def draw(self, win):
        self.draw_cuadrados(win)
        for fil in range(FILAS):
            for col in range(COLUMNAS):
                pieza = self.tablero[fil][col]
                if pieza != 0:
                    pieza.draw(win)

    def move(self, pieza, fil, col):
        self.tablero[pieza.fil][pieza.col], self.tablero[fil][col] = self.tablero[fil][col], self.tablero[pieza.fil][pieza.col]
        pieza.move(fil, col)

    def obtener_movimientos_validos(self, pieza):
        movimientos = {}
        fil, col = pieza.fil, pieza.col
        direcciones = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        if pieza.color == ROJO or pieza.king:
            movimientos.update(self._explorar(pieza, fil, col, direcciones[:2]))
        if pieza.color == BLANCO or pieza.king:
            movimientos.update(self._explorar(pieza, fil, col, direcciones[2:]))
        return movimientos

    def _explorar(self, pieza, fil, col, direcciones):
        movimientos = {}
        for dfil, dcol in direcciones:
            f, c = fil + dfil, col + dcol
            if 0 <= f < FILAS and 0 <= c < COLUMNAS:
                if self.tablero[f][c] == 0:
                    movimientos[(f, c)] = []
                elif self.tablero[f][c].color != pieza.color:
                    salto_f, salto_c = f + dfil, c + dcol
                    if 0 <= salto_f < FILAS and 0 <= salto_c < COLUMNAS and self.tablero[salto_f][salto_c] == 0:
                        movimientos[(salto_f, salto_c)] = [(f, c)]
        return movimientos

class Juego:
    def __init__(self, win):
        self.win = win
        self._init()

    def _init(self):
        self.selected = None
        self.tablero = Tablero()
        self.turn = ROJO
        self.movimientos_validos = {}

    def update(self):
        self.tablero.draw(self.win)
        self.draw_movimientos_validos(self.movimientos_validos)
        pygame.display.update()

    def reset(self):
        self._init()

    def select(self, fil, col):
        if self.selected:
            result = self._move(fil, col)
            if not result:
                self.selected = None
                self.select(fil, col)
        pieza = self.tablero.tablero[fil][col]
        if pieza != 0 and pieza.color == self.turn:
            self.selected = pieza
            self.movimientos_validos = self.tablero.obtener_movimientos_validos(pieza)
            return True
        return False

    def _move(self, fil, col):
        if (fil, col) in self.movimientos_validos:
            self.tablero.move(self.selected, fil, col)
            if self.movimientos_validos[(fil, col)]:
                for f, c in self.movimientos_validos[(fil, col)]:
                    self.tablero.tablero[f][c] = 0
            if fil == 0 or fil == FILAS - 1:
                self.selected.make_king()
            self.change_turn()
            return True
        return False

    def change_turn(self):
        self.selected = None
        self.movimientos_validos = {}
        self.turn = BLANCO if self.turn == ROJO else ROJO

    def draw_movimientos_validos(self, movimientos):
        for mov in movimientos:
            fil, col = mov
            pygame.draw.circle(self.win, AZUL, (col * TAMAGNO_CUADRADO + TAMAGNO_CUADRADO // 2, fil * TAMAGNO_CUADRADO + TAMAGNO_CUADRADO // 2), 15)

def get_fil_col_from_mouse(pos):
    x, y = pos
    fil = y // TAMAGNO_CUADRADO
    col = x // TAMAGNO_CUADRADO
    return fil, col

def main():
    pygame.init()
    WIN = pygame.display.set_mode((ANCHO, ALTURA))
    pygame.display.set_caption('Damas - Hito 03')
    clock = pygame.time.Clock()
    game = Juego(WIN)

    run = True
    while run:
        clock.tick(60)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                fil, col = get_fil_col_from_mouse(pos)
                game.select(fil, col)
        game.update()

    pygame.quit()

if __name__ == "__main__":
    main()
    
