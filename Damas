import pygame

# Inicialización de Pygame
pygame.init()

# Configuración de la ventana
ANCHO, ALTURA = 600, 600
FILAS, COLUMNA = 8, 8
TAMANO_CUADRADO = ANCHO // COLUMNA

# Colores
ROJO = (255, 0, 0)
NEGRO = (0, 0, 0)
BLANCO = (255, 255, 255)
GRIS = (128, 128, 128)
AZUL = (59, 131, 189)

# Pantalla de juego
pantalla = pygame.display.set_mode((ANCHO, ALTURA))
pygame.display.set_caption("Juego de Damas")

# Cargar imagen de la corona (dama)
CORONA_ROJA = pygame.transform.scale(pygame.image.load("Corona.webp"), (45, 25))  # Para las piezas rojas
CORONA_NEGRA = pygame.transform.scale(pygame.image.load("Corona.webp"), (45, 25))  # Para las piezas negras

# Clase para las piezas
class Piezas:
    def __init__(self, color, fila, columna):
        self.color = color
        self.fila = fila
        self.columna = columna
        self.dama = False  # Si la pieza es una dama
        self.rect = pygame.Rect(columna * TAMANO_CUADRADO, fila * TAMANO_CUADRADO, TAMANO_CUADRADO, TAMANO_CUADRADO)

    def mover(self, fila, columna):
        self.fila = fila
        self.columna = columna
        self.rect.topleft = (columna * TAMANO_CUADRADO, fila * TAMANO_CUADRADO)

    def hacer_dama(self):
        self.dama = True

    def dibujar(self, pantalla):
        if self.dama:
            if self.color == ROJO:
                # Dama roja con corona roja
                pantalla.blit(CORONA_ROJA, (self.rect.centerx - CORONA_ROJA.get_width() // 2, self.rect.centery - CORONA_ROJA.get_height() // 2))
            elif self.color == NEGRO:
                # Dama negra con corona negra
                pantalla.blit(CORONA_NEGRA, (self.rect.centerx - CORONA_NEGRA.get_width() // 2, self.rect.centery - CORONA_NEGRA.get_height() // 2))
        else:
            pygame.draw.circle(pantalla, self.color, self.rect.center, TAMANO_CUADRADO // 2)

# Función para dibujar el tablero
def dibujar_tablero(pantalla, tablero):
    pantalla.fill(NEGRO)  # Fondo negro para que las piezas se distingan bien
    for fila in range(FILAS):
        for columna in range(FILAS):
            color = GRIS if (fila + columna) % 2 == 0 else BLANCO
            pygame.draw.rect(pantalla, color, (columna * TAMANO_CUADRADO, fila * TAMANO_CUADRADO, TAMANO_CUADRADO, TAMANO_CUADRADO))

    for pieza in tablero:
        pieza.dibujar(pantalla)

# Función principal para ejecutar el juego
def main():
    # Crear piezas de las dos partes
    piezas = []
    for fila in range(3):  # Las primeras tres filas para las piezas rojas
        for columna in range(fila % 2, COLUMNA, 2):
            piezas.append(Piezas(ROJO, fila, columna))

    for fila in range(5, 8):  # Las últimas tres filas para las piezas negras
        for columna in range(fila % 2, COLUMNA, 2):
            piezas.append(Piezas(NEGRO, fila, columna))

    seleccionada = None
    posibles_jugadas = []

    # Bucle principal del juego
    jugando = True
    while jugando:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                fila = y // TAMANO_CUADRADO
                columna = x // TAMANO_CUADRADO
                pieza_seleccionada = None

                # Verificar si se hace clic en una pieza
                for pieza in piezas:
                    if pieza.rect.collidepoint(x, y):
                        pieza_seleccionada = pieza
                        break

                if pieza_seleccionada:
                    seleccionada = pieza_seleccionada
                    posibles_jugadas = obtener_posibles_jugadas(seleccionada, piezas)
                else:
                    if seleccionada and (fila, columna) in posibles_jugadas:
                        # Verificar si es un salto (comer)
                        pieza_comida = obtener_pieza_comida(seleccionada, fila, columna, piezas)
                        if pieza_comida:
                            piezas.remove(pieza_comida)  # Eliminar la pieza comida
                        seleccionada.mover(fila, columna)
                        seleccionada = None
                        posibles_jugadas = []

        # Dibujar el tablero y las piezas
        dibujar_tablero(pantalla, piezas)

        # Si hay una pieza seleccionada, marcar las posibles jugadas
        if seleccionada:
            for jugada in posibles_jugadas:
                pygame.draw.circle(pantalla, AZUL, (jugada[1] * TAMANO_CUADRADO + TAMANO_CUADRADO // 2, jugada[0] * TAMANO_CUADRADO + TAMANO_CUADRADO // 2), TAMANO_CUADRADO // 5)

        pygame.display.update()

# Función para obtener las posibles jugadas
def obtener_posibles_jugadas(pieza, piezas):
    jugadas = []
    direcciones = [(-1, -1), (-1, 1)] if pieza.color == NEGRO else [(1, -1), (1, 1)]
    for dir_fila, dir_columna in direcciones:
        nueva_fila = pieza.fila + dir_fila
        nueva_columna = pieza.columna + dir_columna
        if 0 <= nueva_fila < FILAS and 0 <= nueva_columna < COLUMNA:
            # Verificar si el salto es posible (salto sobre una pieza contraria)
            pieza_comida = obtener_pieza_comida(pieza, nueva_fila, nueva_columna, piezas)
            if pieza_comida:
                salto_fila = nueva_fila + dir_fila
                salto_columna = nueva_columna + dir_columna
                if 0 <= salto_fila < FILAS and 0 <= salto_columna < COLUMNA:
                    jugadas.append((salto_fila, salto_columna))
            else:
                jugadas.append((nueva_fila, nueva_columna))
    return jugadas

# Función para obtener la pieza que puede ser comida
def obtener_pieza_comida(pieza, fila, columna, piezas):
    for p in piezas:
        if p.fila == fila and p.columna == columna:
            return p
    return None

# Ejecutar el juego
if __name__ == "__main__":
    main()
